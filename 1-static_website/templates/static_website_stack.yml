AWSTemplateFormatVersion: "2010-09-09"

Description: This stack deploys a basic HTTP static website

Parameters:
  BucketName:
    Description: "Name of the bucket to be created"
    Type: String
    Default: changeme
  DomainName:
    Description: "DNS Domain of the website"
    Type: String
    Default: example.com
  CertificateARN:
    Description: "the ARN of the certificate"
    Type: String
    Default: "arn:aws:acm:us-east-1:*********:certificate/******************"

Resources:
  #
  # Create a s3 bucket for our static content
  #
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: BucketName
      WebsiteConfiguration:
        IndexDocument: "index.html"
        ErrorDocument: "error.html"

  #
  # Create a cloud origin access identity.
  # it will be used by the cloudformation distribution
  # and has to be configured in the bucket policies
  #
  CloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment:
          Fn::Sub: "Cloudfront Origin identity for ${DomainName}"

  #
  # Create the bucket policies
  # map the bucket and add access to the cloudfront access identity
  #
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: BucketName
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            #Principal: "*"
            Principal:
              AWS:
                Fn::Sub: "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"
            Action: s3:GetObject
            Resource:
              Fn::Sub: "arn:aws:s3:::${BucketName}/*"

  #
  # Create our cloud front distribution
  # set the origin to our s3 bucket and map to the cloud origin access identity
  #
  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
          - Ref: DomainName
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 3600 # in seconds
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 86400 # in seconds
          MinTTL: 60 # in seconds
          TargetOriginId: s3origin
          #ViewerProtocolPolicy: "allow-all"
          ViewerProtocolPolicy: redirect-to-https
        # This DefaultRootObject configuration is not enough.
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName:
              Fn::GetAtt: [S3Bucket, DomainName]
            Id: s3origin
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Sub: "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        PriceClass: "PriceClass_All"
        ViewerCertificate:
          AcmCertificateArn:
            Ref: CertificateARN
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only

  #
  # Add a A record in Route 53, to forward the traffic
  # from our domain to the URL (domain) of the cloud distribution
  #
  DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName:
        Fn::Sub: ${DomainName}.
      RecordSets:
        - AliasTarget:
            DNSName:
              Fn::GetAtt: [CloudFrontDistribution, DomainName]
            HostedZoneId: Z2FDTNDATAQYW2
          Name:
            Ref: DomainName
          Type: A
